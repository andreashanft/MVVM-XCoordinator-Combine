//
//  DetailViewController.swift
//  XCoordinatorMVVM
//
//  Created by Andreas Hanft on 02.04.20.
//  Copyright ¬© 2020 andreashanft. All rights reserved.
//

import UIKit
import XCoordinator
import SwiftUI

// Provides a preview using the Canvas
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        PreviewWrapper(viewController: UINavigationController(rootViewController: DetailViewController(viewModel: DetailViewModel())))
    }
}

// This is just a very simple mock to showcase styling.
enum DesignSystem {

    // The color enum should be autogenerated by for example SwiftGen
    // based on the named colors in the asset catalog.
    enum Color: String {
        case themeWhite         = "ThemeWhite"
        case themeBlack         = "ThemeBlack"
        case error              = "Error"
        case defaultBackground  = "DefaultBackground"
    }

    enum Font: String {
        case thonburi = "Thonburi"
        case palatino = "Palatino"
    }

    enum FontSize: CGFloat {
        case veryLarge  = 28.0
        case large      = 20.0
        case regular    = 16.0
        case small      = 12.0
        case verySmall  = 9.0
    }

    enum LineSpacing: CGFloat {
        case wide      = 1.6
        case regular   = 1.625
    }

    // Use enum to also provide a namespace for common values
    enum Spacing {
        static let `default`: CGFloat = 8.0
    }

    enum LabelStyle {
        case h1
        case h2
        case bodytext

        var font: Font {
            switch self {
            case .h1:       return .palatino
            case .h2:       return .palatino
            case .bodytext: return .thonburi
            }
        }

        var fontSize: FontSize {
            switch self {
            case .h1:       return .veryLarge
            case .h2:       return .large
            case .bodytext: return .regular
            }
        }
    }

    enum ButtonStyle {
        case ¬¥default¬¥
        case destructive

        var font: Font {
            switch self {
            default:        return .palatino
            }
        }

        var fontSize: FontSize {
            switch self {
            default:        return .regular
            }
        }

        var titleColor: UIColor {
            switch self {
            case .destructive:  return .themeWhite
            default:            return .themeBlack
            }
        }

        var backgroundColor: UIColor {
            switch self {
            case .destructive:  return .error
            default:            return .themeWhite
            }
        }
    }
}


extension UILabel {
    func apply(style: DesignSystem.LabelStyle) {
        font = UIFont(name: style.font.rawValue, size: style.fontSize.rawValue)
    }
}


extension UIButton {
    func apply(style: DesignSystem.ButtonStyle) {
        backgroundColor = style.backgroundColor
        setTitleColor(style.titleColor, for: .normal)
        titleLabel?.font = UIFont(name: style.font.rawValue, size: style.fontSize.rawValue)
    }
}


extension UIColor {
    @nonobjc class var themeWhite: UIColor          { makeColor(named: .themeWhite) }
    @nonobjc class var themeBlack: UIColor          { makeColor(named: .themeBlack) }
    @nonobjc class var error: UIColor               { makeColor(named: .error) }
    @nonobjc class var defaultBackground: UIColor   { makeColor(named: .defaultBackground) }

    static func makeColor(named colorName: DesignSystem.Color) -> UIColor {
        UIColor(named: colorName.rawValue) ?? .systemPink
    }
}

extension UIView {
    func activate(_ constraints: [NSLayoutConstraint]) {
        self.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate(constraints)
    }
}


class DetailView: UIView {

    var label = UILabel()
    var button = UIButton()
    var stackView = UIStackView()

    init() {
        super.init(frame: .zero)

        setupViews()
        setupConstraints()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func setupViews() {
        backgroundColor = .defaultBackground

        label.apply(style: .h1)
        addSubview(label)
        button.apply(style: .destructive)
        addSubview(button)

        stackView.axis = .vertical
        stackView.alignment = .center
        stackView.distribution = .fill
        stackView.spacing = DesignSystem.Spacing.default
        addSubview(stackView)

        for i in 0...3 {
            let demoLabel = UILabel()
            demoLabel.apply(style: .bodytext)
            demoLabel.numberOfLines = i % 2 == 0 ? 0 : 1
            demoLabel.text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
            stackView.addArrangedSubview(demoLabel)
        }
    }

    private func setupConstraints() {
        // Only extract magic numbers when they are used more than once
        let margin: CGFloat = 16.0
        label.activate([
            label.centerXAnchor.constraint(equalTo: centerXAnchor),
            label.topAnchor.constraint(equalTo: safeAreaLayoutGuide.topAnchor, constant: 42),
            label.leadingAnchor.constraint(equalTo: safeAreaLayoutGuide.leadingAnchor, constant: margin),
            label.trailingAnchor.constraint(equalTo: safeAreaLayoutGuide.trailingAnchor, constant: margin)
        ])

        button.activate([
            button.widthAnchor.constraint(equalToConstant: 180),
            button.heightAnchor.constraint(equalToConstant: 44),
            button.centerXAnchor.constraint(equalTo: centerXAnchor),
            button.centerYAnchor.constraint(equalTo: centerYAnchor)
        ])

        stackView.activate([
            stackView.topAnchor.constraint(equalTo: button.bottomAnchor, constant: 40),
            stackView.leadingAnchor.constraint(equalTo: layoutMarginsGuide.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: layoutMarginsGuide.trailingAnchor)
        ])
    }
}


class DetailViewController: UIViewController {

    // MARK: Stored properties

    private lazy var detailView = DetailView()
    private var subscriptions = Subscriptions()
    private let viewModel: DetailViewModel

    init(viewModel: DetailViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func loadView() {
        view = detailView
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        setup()
        setupBindings()
    }

    private func setup() {

        // Setup specific to the view controller

        title = "Detail üîç"
        // tabBarItem = ...
        // supportedInterfaceOrientations = ...
    }

    private func setupBindings() {

        subscriptions.add([

            // Outputs
            viewModel.$outHeadlineText.assign(to: \.label.text, on: detailView),
            viewModel.$outButtonText.assign(to: \.button.defaultTitle, on: detailView),

            // Inputs
            detailView.button.onTap.assign(to: \.inBackAction, on: viewModel),
        ])
    }
}

